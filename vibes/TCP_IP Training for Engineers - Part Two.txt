Alex Lennon  0:11  
I so right then, where did we get to? I can't remember. Where did we leave off. I think we were talking about IP addresses and classes of IP addresses and how you talk about the devices on your network, and then the other bits are the unique networks, and you can't talk from your network directly to another network. So you can talk you have two computers on your network defined by the right IP address prefixes for the network you can talk directly otherwise, no, and there's a different way of doing that. So what we'll do is we can sort of try and clean that off a little bit before we go on to different networks talking to each other. I just wanted to talk about how your computers talk to each other on the same network, because there's a little bit more that we need to go through there. Because you know, for example, you know your IP address, and you know the IP address that you want to talk to, but you don't talk directly to an IP address on an Ethernet network. And what actually happens is, if you've got Computer A and computer B, and you've got mac address a and MAC address B, and you've got IP address a IP address B, tends to be The IP addresses that we think about and deal with in a TCPIP setup. Now let's talk about where those IP addresses come from. There's two ways of doing all three, three main ways of doing it, two ways nowadays you can do static IP setup, which is where you sit down and you tell your computer what its IP address is. And an IP address by itself isn't a lot of use because it doesn't tell you what class of network you are. The computer can't work out what to do. So whenever you talk about setting up an IP address, that inherently means you've also got to set the net mask. And you might set the net mask with, you know, the suffix, whatever it might be, 24 for a class C NET, like that type of thing. There's also the gateway, but the gateway is to do with other networks, so we'll come on to that. So you might set up your IP address statically. Problem with that is you gotta manage it absolute nightmare. If everybody's setting up their own IP addresses, who decides who gets what IP address, and if it's unique, what happens you put two computers on the same network with the same IP address, which you can do? No, you're stopping. You. It will all go crazy because, you know, there's no what it's doing. So we don't do static, and we generally don't do static. What's the other way of doing it dynamic, and what's the protocol? D D, D, D, H, C P, D, H, C p, which is the dynamic host control protocol, and that is a successor to another protocol that nobody ever talks about anymore, called boot P which was, was a simpler, older way of giving out IP addresses. And basically everybody uses the HCP when you buy wireless access point, plug it into your home, you get it off Virgin Media, however it might be, and that will be configured by default to run a DHCP server, and that will be giving out IP addresses. And the DHCP server is an example of an application protocol that runs as a part of that OSI model, TCPIP stack that we were talking about, and it fulfils a function. The function it fulfils is handing out IP addresses, and this is what you find right the way through all of this, there's some stuff that needs to be done, and somebody's come up with a protocol implementation. Specification to do it, and that's been adopted, and then people have implemented that in a bit of software, and that bit of software will either run sort of as part of a TCPIP stack or as some other kind of process. So somewhere in does there is a box running a DHCP server application, and that is dealing with everything on this network that needs to get an IP address. And in fact, some of the problems we've had in the past is because people tend to plug in all sorts of stuff all over the place, around here, and if you plug in a couple of devices that are both running DHCP servers, all hell breaks loose again, because who knows where you're getting your IP address from, and they're not inherently built to know about multiple DHCP servers. You're supposed to have one on a network. Now I'll talk about jumping around a little bit. Apologies for that, but it's just as things come to me, something that you want to be aware of is RFCs. RFCs are like the history of the internet. They are the bones of the internet. So over many years, the internet is a sort of collaborative exercise, and anybody has been able to put a request for comment, I think it stands for out there with their suggestion of how some stuff should be done, and everybody else around and about could see that and come back and say, Yeah, we like that. We don't like that. We think that should change, debate, discuss, and then a lot of these have then been adopted as core standards, core protocols for the internet. So if you actually want to know how something works down to the ones and zeros, you will find an RFC, or more often, quite a lot of RFCs that relate to that thing. And you can look up the RFCs relating to DHCP, and it will tell you exactly how everything has to be implemented. So that's the place to go to get your questions answered, and there's all sorts of other stuff. When people write up, there's loads of this stuff all over the place, but that is the canonical place to go to get your questions answered, on how the internet works. And some RFCs get superseded by newer RFCs, and it's all sort of linked, and you can see how that has happened and what the history of it is. There's some really good RFCs about interesting protocols. I can't remember what it's called. There's a carrier avian protocol for the Internet, which periodically you get people putting joke RFCs in. And this was all about how we transmit our packets of information using pigeons. There's a few of those around that about so RFC is very important. And I go right back to the basic, basic stuff. What is TCP? What is IP? How does this stuff work? Now, talk a little bit about the HCP, because that is quite important. You'd be developing a device. You plug it onto the internet or onto your network, because you're trying to do things, trying to get, generally your laptop debugging with a device or transmitting information, MQTT, whatever it might be. And the easiest way to do it, to get set up, is to do a static IP setup on your device. Because you can do that. Most devices implement a DHCP client, like in your standard settings, in your laptop. And that DHCP client, what happens is, more or less, when you start it up and it gets physically connected onto a medium, onto the network or onto the Wi Fi, your device says to itself, ah, I don't have an IP address. What do I do? And it sends out a broadcast message. And we talked a little bit about broadcasts. We said that was when everything was ones. So that's two, five, 5.24, 5.2. 45.2 55 and that means go to everywhere on my network. On everybody to see this, because I don't know who I'm talking to. I don't know where I am, who I am, who I'm talking to. So say, Hey everybody, excuse me, I'm here. I need an IP address. Is there a DHCP server that will give me one? And the DHCP server is listening somewhere with both says each other off with a coffin. I'll just, I'll just take a quick break. Let's check this thing is still recording. Actually. Yeah, it is. I. This way for sure, I set you off there. Didn't, I'm sorry.

Alex Lennon  10:08  
So, as as with, you know, we talked about the packets and the prefixes and all these kinds of things, and there's a particular protocol code that says, This is a DHCP message, and that DHCP message gets broadcast across the network, and a DHCP server is just sitting there on a machine waiting for those kinds of messages, and it goes, aha, I've got a new device that needs an IP address. I'm going to give it an IP address, and that depends on its configuration, but typically, a DHCP server has, excuse me, been set up to know what it has to have been set up to know what the network is, what the net mask is, class of network, and arrange your IP addresses that it is in charge of, that it can give out, and it will have given out some here and there and everywhere, to you and to you and to that and to the phone And that phone and your phone, and it's got some spare and it takes one of the spare ones and it'll give it out to the new devices asking for one. And so what will happen is there will be a DHCP request which is broadcast, and a DHCP response which says, Yeah, okay, here's your IP address. And then there will be a DHCP ack, which is where the device says, Oh, thank you very much. That's great. I've got that. And generally, those are the semantics of how things work within TCPIP. You get some kind of request and some kind of response and some kind of acknowledgement, or some kind of or a knack, which is not acknowledgement, you got a problem situation. Things have not worked out, and it might be a rejection these types of things. That's the kind of communication that you get right the way through all of this. Now come back to MAC addresses. So what's happening is, I've got my computer a which has MAC address A, because that was burned into it, that always is there. And I've got computer B with MAC address B will say that our DHCP server is running on computer B. And so my computer, I turn it on and it sends out a DHCP request. It broadcasts that we said, lots of other computers are going, I don't care about that. Something to do with me. Just ignore that. No problem this computer, because it's running on DHCP services. Oh yes, I deal with that. I need to do something about that. And it's passes up this packet, up the stack into the DHCP process application that's listening. And what this knows is that this packet, this request, has come from a computer with this MAC address. It has gone from this MAC address to the broadcast address, which is every address, and so it can respond to this MAC address, even though there is no IP address set up on this computer. That's how this stuff works. On a network, your computers talk to the MAC addresses of the other computers. That's key. They don't talk to IP addresses, which probably most people don't know. So your server goes, aha, broadcast, I'm dealing with that. And it works out what IP address it's going to send back. And it sends a packet to that MAC address on the DHCP protocol. And it's an assignation packet to say, Here you go, is your IP address from this MAC address. So we've gone from this MAC address to this MAC address. This already has an IP address, and this goes great. Thank you very much. Now I've got an IP address. Now it's set up with an IP address, and that's what happens for every computer. And the best way to really understand this stuff is to get wire shock, which is the cons protocol analyzer, and look at that happen. One of the really big problems that we have, which is quite common, is that a really big problem, but it's quite common, is that you put your little device on that, your embedded device you're trying to work with, and you don't know what the IP address is, and it's configured for the HCP so you know it's getting one. I don't know what it is, very frustrating. There's a couple of different tricks you can use to work around that, but one of them is, I mean, often these things will be provided with some other way for you to figure that stuff out, because you need to know that to talk to it. But what you can do is you can put Wireshark on your network, power on your device, and with a bit of luck, you'll see that DHCP process occur, and you'll know that because generally, devices aren't asking. For IP addresses all over the place that what happened was that device got turned on and got given that IP address, and now you know what it is, so it's quite a good way to figure this stuff out. What I should also say, just to cover it properly, is that the DHCP assigns IP Address Leases, and what that means is that it's giving you an IP address for a period of time. So you don't get it forever, because if you've got it forever, it will run out of IP addresses eventually. So you get your IP address, and the server is configured for how long you've got it for. And as part of the message assigning it, it tells you how long you've got it for, and that can be, you know, it would typically be a period of hours or days, lots of days, because you don't really want this stuff to change. But it could be much more frequently you needed this stuff to change. It all depends on who's setting this stuff up. And so what happens is, you get your lease, you get your IP address. You know, that's going to be valid to be your IP address for a period of time. That means that the server knows it isn't going to reuse it and give it to somebody else for that period of time. And when you get to the end or some period through that lease, you reapply again. And so can I have that again, please? And a service, yeah, there you go. That's fine, and it just updates it, and you carry on doing it that way. So you get lease renewal. I uh, touch one book, P. Book P is like DHCP, but older and stupider and simpler. And it only really exists because if you're putting an embedded system together, and sometimes you, I mean less so nowadays, but sometimes you're working under real constraints, you haven't got a lot of space at all. And so instead of trying to implement something very complicated, you just want to do something really simple. And Bucha, relatively, is a lot simpler than DHCP. So it still exists. People do still use it. There's a bunch of other stuff you can do with DHCP that people really do, which is that in the response from the HCP there are additional fields that you can configure and populate. So when a system comes up and it's that, you know, I'm alive, message, you can imagine maybe you want to tell it some other stuff as well, apart from just the IP address, and you can configure responses to go in that DHCP message, which might be, for example, you know, download an operating system from this place and start running it, and that begins to get into what you would call PAC or netboo on systems. Excuse me, if you've got a thin client system which doesn't know anything about anything, and really you want a generic device to power it up. You want it to do what you want it to do. It's much better to have all that configuration over here in your DHCP server and then pump it out to these devices, because then you can tell it to be something else next time it powers up. There's different ways of doing that stuff, but DHCP was designed to allow you to do that, so you can play around with that and do all sorts of spits and bobs. So what we got is, we've got devices coming up. We've got MAC addresses now they've got IP addresses. Thank God for that. You wouldn't have thought it would take us quite so long just to get to a point where the thing has got an IP address with you. You thought that was quite simple. So the next thing is, if I've got Computer A and computer B, and probably ping is not an unreasonable protocol to bring it in at this point. Ping, which we know and love, is an example of a usage of the ICMP protocol. I can't remember that stands for something like the internet computer messaging protocol, and it's used for a number of different things, actually, but mainly we think about ping because we want to know if a computer exists, and we want to know if it's active on a particular IP address. So we'll send a ping, and that ping will result in an ice a particular kind of ICMP messaging packet being sent, and what is supposed to happen is that the other end, receiving that ping message sends a ping response, a ping rec back to us, and then we know it's there, which is quite a helpful thing to know. So going to what we're talking about with MAC addresses, and what's quite important is that in the TCPIP stack, when you do a ping, it's not actually talking to the IP address, not in the first instance. What happens is that you send your ping, which is up at the top of the TCPIP stack, and that goes down through the TCPIP stack, and the TCPIP stack says, Okay, do I know the MAC address of the computer I'm trying to talk to? It has a table. Yeah, and initially the answer will be no.

Alex Lennon  20:04  
So then the TCPIP stack, internally, unbeknownst to you, does something called an ARP request, which is the address resolution protocol. Because what it's trying to do inside the TCPIP stack is to resolve the IP address that you want to ping to get a MAC address on your network for the adapter on your device. So again, if you're running Wireshark, and Wireshark is the best way of figuring this stuff out. Really, what will happen is inside your TCPIP stack. When you issue that ping request, an OP request will be broadcast on your network saying, say, We're pinging one and 21681, 100 and it will say this in Wireshark, who has IP address, 1921681, 100 who's got that? That's a broadcast that goes all around the network, a bit like the DHCP stuff. You can see how this stuff is starting to come together. Then all the devices on the network receive that broadcast, and most of them go, that's something to do with me, because that's that's not my IP address, and the one that has that 100 IP address goes, Oh, that's me. So it is under an obligation now to respond with an ARP response saying, Yes, that's me. So what happens is, this computer sends a packet from this MAC address and broadcasts it very, very similar to uhcp. It's an ARP request packet. This computer is 100 say it's okay, that's me, and this is all within the TCPIP stack. It's all happening under the covers that you don't see, and it responds, and it knows the MAC address that the packet came from, and it responds to that MAC address says, Yes, this is my MAC address that you don't know about, and I'm this IP address, and that maps those two things together, that connects them, and then inside this computer, in the table, it caches that information, and it says, aha, now I know that that 112168, 100 IP address is that MAC address. And the next time you try to ping it, it won't do any of that again, because it already knows. And there's a command that very few people ever use called up, and you can use that up command to show you the cache of the mappings that your computer knows about. And again, you can statically Create Your Own up mappings. And this is the other trick you can use, which is a kind of black art Get Out of Jail trick. If you've got a little black box, and maybe it's you've got the MAC address, because that's been written down somewhere, and you don't know the IP address, and it's on your network, and you can't work out what's going on by monitoring your packets with the HCP. And I'll add that quite often with Wi Fi, this is a problem because you can't, whereas if you plug into a network, you can often see everything that's going on. You can see all that stuff quite often. With Wi Fi, you can't, it won't show you all the other stuff going on the network will only show you what your computer sees, which makes it very difficult for you to see what's going on with the HCP. This goes into Wi Fi and promiscuous mode. But point being, what you can do is you can statically set up an OP mapping so you can say, I'm telling you my computer, that this device with this MAC address, we're going to have this IP address for it, and it will then try to use that instead of issuing that. So whatever the real IP address of the thing is, you've actually set that IP address yourself, and you can try and get into it and talk to it that way. So that's that's the real underpinning basis of how two computers on the same network talk to each other and do address resolution to map between IP addresses and MAC addresses, which is how they really talk to each other on an Ethernet network, and our DHCP, or indeed, boot P is used to assign IP addresses, or they can be statically assigned, right question? Yeah,

Speaker 1  24:27  
if we assign static IP to one device, will DX city know that this IP is already taken?

Alex Lennon  24:37  
No, all hell breaks loose. It's a problem that's that's one of the big reasons. Well, so from the maintenance, which is probably the big reason, that's why we don't do it, because it's error prone, then we could, we could all go and sit at our computers and give them all identical IP addresses, and it would be mayhem. You.

Speaker 1  25:00  
So if someone came and gave static IP to somebody,

Alex Lennon  25:06  
yeah, what can be a problem is, if somebody goes into a place and sets up a static IP address on the network for fun or because trying to cause trouble, they could set it up to be the same as a computer already on the network, then you have a problem.

Speaker 1  25:22  
Can we, like, identify that these particular devices have, like, static? No.

Alex Lennon  25:30  
Well, I mean, I'm oversimplifying some things, and I'm going to explain to you which bits I'm not being truthful with you in a second, that's the basic position, you can work things out because, and again, this is the engineering bit. You know, if you know you've got one DHCP server handing out addresses, and that's under your control, and you go to that DHCP server, you can get a list of all the addresses it's given out and the MAC addresses is given them to so you know, that's what should have happened. And if you've got mac, if you've got IP addresses around and about which aren't those addresses, that's either a different DHCP server or boot piece ever giving it out, which is a network problem, as I said, that can happen or somebody's you set it up themselves. You can sit there and look at your IP address and your net mask, and you can change those to statically define them on this network in does. And as long as you pick an address that nobody else is using, it will work fine, and you can be any address you want. It's naughty, you know, because you've undermined what the management side is trying to do, but that's fine. A lot of what See, a lot of where the internet comes from and TCP comes from, is collaboration. There wasn't really an idea of bad actors and needing to secure things and people doing things they shouldn't do back when all this came about, it was a lot, really small numbers of academic people in universities who were sort of sitting there trying to make things work. And so what you're getting there is we try to make it work together, and that's the ethos of this, which doesn't work well today, because that's not how the world is. So that's understanding a little bit of the history of the thinking about it again. So the next bit, you're still with me? Yeah, good. So the next bit is, if I've got a network over here, these pens are awful, I gotta find a pen that works. If I've got a network over here, it's a bit better. And that's us, that's us in does. And then I've got a network over here, what might that be? I don't know. Let's try. Let's let's talk about there's a computer box here. I know I'm radically oversimplifying, but that's Google, okay, and we're going to pretend that's got one IP address. And we're going to pretend that's 1.2 dot 3.4, so I want to get a web page from Google. And what we won't worry about right at the minute is that you know that to get a web page from Google, I'm going to use HTTP or HTTPS, which is the hypertext Transport Protocol, or the secured hypertext transport protocol, which is where we go back to Tim Berners Lee, but we'll leave that for now. All we'll think about is that I'm going to send a request to get some information from a Google server, and I need to get the information. It's kind of the nuts and bolts of it, isn't it? Now, my computer is on our network here, and I'm going to say that that's on 190 2.1, 68.1 dot 10, and we've got a few others, 1112, whatever. So that's our network. Our network is the bit you know, thinking about the net mask again, it's a Class C network, 190, 2.16, 8.1, and when you express a network, you generally put what would be the device number is zero. So the network is that zero. So we're on network one and 216810, now you know as well that that address is a private IP address in our network. It's not you. Unique. You know, from wandering around and about that in my house, I might be running on that network. In your houses, you might be running on that network. So that's not globally unique. It's all over the place. In fact, because it's pretty standard, it's getting lots and lots and lots of those private networks. And so if I want to talk to an IP address, 1.2, dot 3.4, first thing we've got to do is to work out how does that packet, how does that request? Let's call it a ping. Then that's probably even easier, like ping out to 1.2, dot 3.4, how is that packet, that ping request, going to get from my computer over to this computer, maybe on the other side of the world, and I make it all the way back, and that's kind of the whole point about where the Internet came from. And I was talking about these different wires, because there's loads and loads and loads of different ways this information could go. So what is important here as well? It might be obvious, but just in case, it's not. You know, data is just zeros and ones and on and on and on. It goes endless stream of zeros and ones. But to be able to use data, we have to block things up to mean things. So that's why I'm talking about packets of data. So you have a packet of data, then another packet of data, and then another packet of data. Now a pinged packet is very, very small, so that might be just one packet of data, and we think of that as a sort of indivisible unit. And so I'm going to think about ping packet, which is a small packet, and that doesn't get broken down any further. And that packet, we said, might have numbers of headers depending on where the protocol bits through the protocol stack. Don't worry about that. It's just a ping packet. Now the first thing that happens is that I say ping one to two to three to four, and that goes into my TCP P stack, and that says inside itself, right? Is that network the same as my network? And that's where we get the net mass coming in. And clearly it's not so then it says, Okay, that's not my network. I can't directly talk to this computer. If I could, I would have gone through the whole ARP resolution, MAC address business that we talked about. But I can't, because I don't know anything about this. So what it then says is, okay, well, luckily, because of the way TCPIP works, is standardised, I've set up a gateway. Now, if I haven't set up a gateway, we're bothered, but I have set up a gateway. That gateway can be thought of as a computer on my network, and as it's on my network, it must be the same network, so my gateway will often be if you look at your own networks on a Class C network, it'll be 192168, 1.1, it's very typical. 1.254, it's very typical. Can't be 255, because that's a broadcast address. So if you're on a network doing some work and you're trying to find your gateway, if you run if config on there, now it should it, I think it may not be if config, if you run root space minus a n, that should give you a bunch of gateways for different adapters. You see that no, does the root command work? Sorry, R, O, U, T, E, oh. Adoption,

Alex Lennon  34:05  
just try root, then there's a different usage between Windows and Linux, but the root command is called root because it's to do with how packets are rooted across the internet,

Unknown Speaker  34:20  
destination, Gateway, mask, flag,

Alex Lennon  34:23  
metrics, there you go. And so that that there will be gateways set up. And typically, what we might say a bit different for the 10 series class a network, but it must be a gateway, must be on my network, because if it wasn't on my network, I couldn't talk to it. And a gateway does what it says on the tin. A gateway gateways between my network and the rest of the world. You. Okay, so when I try to send a packet of information to a network that isn't my network, my TCPIP stack knows that and instead sends that packet of information to the Gateway, saying to the Gateway, I need you to send that on to this place that I'm trying to talk to. That's what the gateway does, and that's a fundamental bit about how each network within the internet communicates with other networks within the internet. So what's happening is it basically replaces the IP address I'm trying to talk to and says, you know, it tries to find the gateway using the address resolution protocol, and it gets the MAC address of the gateway and sends information to Gateway and says, right, Could you could you go and work it out for me, please? And it's important to say that this my computer doesn't really know what the gateway is going to do, nor does it really care. It's just saying, Look, I don't know how to do this. Could could you do this for me, please? And then we get into some quite complicated stuff I don't really understand properly to do with how we do routing. And it's like the BGR Border Gateway routing and other kinds of routing. And essentially, what's happening right across all the gateways that the internet is made up of, it's working out metrics for the best ways to send packets to different places. What are the best routes? You know, do I go trying to get to America? So do I go through this fibre link, or do it go through that place? Or do I go through Russia, China? What are the best ways of doing this? What are the weights for this kind of thing? And all of this is dynamically changing all the time, and what will happen is that my gateway will try to send that information. And if it, if it can talk directly to this place, it will, but it's likely and probable that it can't. So what it will do is it will know that it's going to talk to another box, which talks to another box, which talks to another box, and these, you know, you would probably call them routers. You know, people use sort of gateways and routers interchangeably, or at least I do, probably not quite correct, but I would say, you know, Gateway tends to be, that tends to be the gateway in and out of your network, and a router would tend to be the thing that's moving these packets across the internet. But, you know, it's all much of a much nice until eventually it gets to some point where it can get through to a gateway to talk to this IP address. And that's how it works to get out of your own network into the public internet and off to the you do the off to the server that's going to come back and respond to you. So then

Alex Lennon  38:17  
part of the problem you can think about is that this gateway will have a public IP address on the internet, usually. And you can find that if you look at the portal on your access point at home or something, it'll have the public IP address, and that, of necessity, will be unique, and that's a really big problem, because we've run out of public IP addresses now, because we've got too many devices for IPv four, which is why we've moved moving to IPv six. But that public IP address, the server can respond to that, but it doesn't know about the private IP address of our device within the network. And in fact, we said there'd be loads of those all over the place. So there needs to be a way of responding back to our computer from the server. So I'll leave that for the time being. That's just that's just, that's just something to consider. Now, thus far, we talked about pinging, pinging packets, and I've sent my ping and it's gone bling bling bling. Bling bling over here, and it gets ping response which goes and it might not be the same route back, might be a different route. Back, ping to get to me, and then somehow, magically, it's going to get to my prime IP address in here. Wouldn't worry about now, it can be useful to see that, and so one of the commands to do that is called traceroute, or. Will trade again, slightly different, different platforms. I think on Linux it's trace RT, no, I think on Windows, it's trace RT, and I think on Linux it's trace root. I would try, because I don't want to no jumping around. Chaps, sorry. And there's a lot going on here. There's another protocol you know about called DNS. And two servers owned by Google are DNS servers for the web, which are on IP addresses, 8.8, dot 8.8, and 4.4 dot four, so maybe Ping 8.8, dot 8.8, what you should see happening is you get a ping response within a period of time, And it may tell you about pops and things i

Unknown Speaker  41:09  
Are you pinging? Yeah,

Alex Lennon  41:14  
it's normal ping. Very simple, normal ping. It's doing a normal ping, and a normal ping is telling you a couple of 1000s, very obvious, but beginning at the beginning, normal ping is telling you a couple of things. You're getting a response. So you're talking to the server. Servers up, you've got connectivity. That's actually a really big thing when you're developing and it's telling how long it took. So it's telling you a round trip down in milliseconds, and that can be interesting if you're looking at Wired connectivity versus Wi Fi. Wi Fi is going to be a lot slower. These kinds of things. Latencies get interesting in terms of real time communications like audio and video and stuff like that. Also on what we're going to come on to come on to here is the reliability of the messaging that you're doing. Because clearly, for a lot of use cases, it's a bit problematical if half the stuff we're sending just goes disappears, and, you know, doesn't come back again. And in the kind of logical, mathematical world, everything works. And in the real engineering world, that's not true. Things generally, quite often, don't work, sadly. But then, you know, that's that's why we get paid. So maybe it's not such a bad thing. So the other thing you can get is, if you've got a good connection, you'll see those ping packets. Usually they're incrementing numbers. You want to be focusing on 10. And if you're seeing gaps, that's where packet losses are caring. You're getting packets dropped either on the way out or the way back. And what that's telling you is that somewhere we don't know where, between you and the computer you're trying to talk to, which could be anywhere in the world, there's a problem. Often that would be you've got a dodgy local Wi Fi network. So this is a way of looking at the quality of your local Wi Fi. We had this problem here. We had, this is a microwave link coming out of does Liverpool through through the city to give us internet connectivity. It was quite flaky, which was causing me all sorts of problems. And what had happened was, in a storm, the dish that's doing the microwave link had moved. And so it was quite intermittent whether we were getting that connection through or not, and we could see that in the packet loss. So that was some of the testing that we did. Next thing from ping is trace route. So try running a trace route to 8.8, dot 8.8, and while you do that, I'm just going to top up my copy. Yes, brilliant, but you should see that that trace route is going through a whole list of computers or routers, whatever you want to call them, to try to get your packet from where you are to where you're trying to talk to. Yeah, some of them won't respond. What Traceroute is doing, if I remember rightly, is it's using a different kind of ICMP protocol message to check out each individual computer on the route. So ping is just one kind of message that you can use with ICMP. And there are others which are far as working, so many really use ping. Now, you may have looked at this, I don't know, but if you really want to get into it, and it can be quite interesting, there are various online websites which give you a geographical ping. So you can ping the server. You can ping an IP address, and it will show you on a global map the route that your packet is taking to get from A to B, which can be quite an interesting thing. So we're talking about networking inside the network between different. Networks, gateways to get to different networks touched upon public public IP addresses, private IP addresses may come back to that in the future. But what I wanted to talk to you next about is connection less and connection oriented protocols, because they're important, and when we talk about ping, keep going back to ping. And that's your sort of, you know, how are things working tool? Yeah, you're very, very basic. How are things working tool? But you don't use minute, you know, it's obvious, isn't it, but you don't use ping to move data around, and really what you care about is moving data around. So there are two basic protocols within the TCPIP stack to move data around, and one of them is called UDP, and another one is called TCP UDP. NOTICE stands for user datagram protocol, TCP, transport control protocol, UDP, you can think of as simpler and connectionless. TCP, you can think of as built on UDP, as a lot of things are with all of this, everything's building on, everything else is connection based. I'll try and explain what that means. So if I've got Computer A, I've got computer B, and we're not going to worry too much about all that networky stuff that we've done that right? We're happy with that that's happening under the covers. So we're not going to try and over complicate by going through all that. We're just going to view this as I've got an IP address that's got an IP address. I want to talk to it. So that's kind of more your day to day, isn't it? That's really what you're doing. I wanted to go through the other stuff because it is important to understand what is actually going on when you do this, particularly when you run into problems. It all works. You don't care when it doesn't work. You need to understand that stuff to fix it. This, I want to send some information over here. Maybe I want to get a response back. Don't know, as a minimum, I want to send some information. And I can send a packet of UDP protocol information. There's some bits in the headers of these things with TCPIP stat says that UDP packet very much. Off it goes. I'm sending it to an IP address. All the other magic happens now that will likely go through a bunch of gateways, bunch of routers, to get from A to B. And it may be that this one here is busy, happens. And it may be that this one here says, I'm too busy for you, so I've set my UDP pocket. Goes out, goes out, goes out, gets here, that goes now, busy. What happens? No, it's not that clever. Just lose it. It's not very important packet. That's all right. But if it was my mom pushing a medical emergency button, I would have a problem with that. But it's, it's very simple, it's very lightweight. It just does what it says on the tin. It's a user datagram packet. You send it, it'll probably get there, but it might not, and you can't rely on that. That's what's critical, that you can't rely on that. So the user datagram protocol gets sent out. It may get there. It may not, the other end. May send a response back. It may not. That depends on your protocol, because the protocols are built the more complicated stuff, like HTTP, for example, HTTP is built on top of TCP, MQ, TT is built on top of TCP, MQ, ttsn is built on top of UDP. So it's the stack again, everything sits on top of something else now, where I want a lightweight, fast, low bandwidth way of transmitting a bit of information I don't really want it gets lost, then I'm going to use UDP. So UDP tends to be the basis of a lot of kind of real time protocols. Now, if we're having a video chat on. On your likes of zoom or whatever it might be. We're sending a relatively high amount of data, audio and video in a compressed format, and long as the compression format can take it, we don't really mind if we lose some stuff, you know, and you get a bit of breakup sometimes, don't you, it stops, it carries on, and a bit of jitter, whatever it might be. I don't really care if I lose some stuff, as long as overall, most of it kind of works. So we will be using UDP for that, because that's low overhead, and we just send a load of fast UDP packets out and sort kind of hope everything works okay now,

Alex Lennon  50:42  
and also a good embedded use case for that would be, you know, if I've got a load of energy metres all over the place, and my energy metre is counting up my energy usage, and it sends that packet of information out every now and again, right? You're on 10, you're on 50, you're on 100 it's costing you a fortune up and up it goes. If I lose some of those packets along the way, it doesn't really matter, because the numbers still going up. So I've sort of lost a bit of granularity, but I can figure out what's going on. So that's okay. But like I said, if it's the medical alert button, not okay. So then we come on to and so that's a connectionless based protocol, and then we come on to a connection oriented protocol, which is where we try and keep track of what packets have been sent and what's going on. And you can imagine that that keeping track of things makes everything really quite a lot more complicated in comparison to the symbol. Now at this point we talk about ports. You know about ports? What's the default port for a website 80 and what's the default secure port for a website 443, useful to know 8443, although they don't have to be again, it's like I said, with GOP addresses for the class classes of networks, this is by good practice. So whatever you know, your web server is going to be on port 18, because that's the default. Doesn't have to be put it only you want. Now, where was I going with that. Yeah, right. Okay, so let's just go back to thinking about packets again. And I've got my Google server here, and my Google server is sitting on 1234, and I want to talk to the website, which is HTTP, which by default is port 80. But maybe I want to talk to something else. Maybe I want to talk to an MQTT server, which by default is listening on one, 883, well, let's think about that. I've kind of jumped ahead a little bit, but if I'm over here on my computer and I want to talk to this computer, and we know computers can do lots of different things. So how do I figure out how to talk to the web server running on this IP address versus the MQ, TT server running on this IP address? Well, clearly, I can't just talk to an IP address because I don't have enough information. I've got to have a way of saying I want to talk to these different services, and I can run a load of different services on a computer. I mean, it's kind of less so nowadays, because we've got so many computers all over the place that you probably tend to think of a cloud running a server, which is like a web server, and there's just one of these things that sits there on a computer. But you can imagine, back in the day, we had a lot less computers, and we all did a lot more. You can think of a gateway in does and you know that's running a DHCP server, but it's running other stuff as well. It's running a portal for you to configure it, and it's running this. It's running that. It's running the other How do you talk to these individual services? Well, we have a port number to enable us to route our packets from we go through the internet, we get to the right server on the IP address. It goes into the TCPIP stack, and it gets routed to the right service up at the top of that, the application level of the stack, or maybe not usually, well sometimes, depending on what that port is. So when you run a piece of code, a server, piece of code that will listen on a particular port number. It binds to a socket. Well, don't worry about it listens on a particular port number. So when I send my UDP packet, I was oversimplifying to say I'm sending my UDP packet to. A particular IP address, I have to send my UDP pocket to a particular IP address, which is a computer and a particular port which is a service on the computer, and I choose what I want to talk to. And I do that with both UDP and TCP. I don't do it with ICMP, because it doesn't have any meaning for that. There are different kinds of ICMP packets. But a typical ping ICMP packet is just, are you there? So there's no other service I need to specify there. I just, are you there? Yes, TCPIP stack response. But a port number is usually is specified to be 16 bit so you can have about 65,000 odd different services running on a computer. And in particular, the way it works is that when I send a UDP packet, or we will come on to a TCP packet, I send it from my IP address and also from a local port number, local port number. And that's so that if something is trying to talk back to me, if I send a packet from my computer and it goes to this HTTP server and that responds. It's the same thing. It's got to get back to my computer and the right service running on my computer, so that also has a port number. Now, usually we don't really care, so usually that local port number is randomly assigned. And usually, if you look at Wireshark, you'll see that the sending bit, the client bit, the web browser bit, has a local port number, and it just increments. This always stays the same, because you have to know what this one is to be able to talk to it. And it knows, because it's in the packet, if it wanted to respond, what that port number would be, but mostly we just ignore that stuff. But it's there, and it's important to know it's there, so I can see you're flagging. So we will, we will finish this one quite soon. I think there's quite a lot of information, isn't it? Yeah.

